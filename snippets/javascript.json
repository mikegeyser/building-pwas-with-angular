{
	"sw template": {
		"prefix": "_sw1",
		"body": [
			"importScripts('https://storage.googleapis.com/workbox-cdn/releases/3.0.0-beta.2/workbox-sw.js');",
			"",
			"const precacheManifest = [];",
			"",
			"workbox.precaching.suppressWarnings();",
			"workbox.precaching.precacheAndRoute(precacheManifest);",
		],
		"description": "sw template"
	},
	"sw config": {
		"prefix": "_config1",
		"body": [
			"\"swSrc\": \"src/sw.js\",",
			"\"injectionPointRegexp\": /(const precacheManifest = )\\[\\](;)/"
		],
		"description": "sw config"
	},
	"cache categories": {
		"prefix": "_sw2",
		"body": [
			"const dataCacheConfig = {",
			"    cacheName: 'meme-data'",
			"};",
			"",
			"workbox.routing.registerRoute(/.*categories/, workbox.strategies.cacheFirst(dataCacheConfig), 'GET');",
		],
		"description": "cache categories"
	},
	"cache all routes": {
		"prefix": "_sw3",
		"body": [
			"workbox.routing.registerRoute(/.*templates/, workbox.strategies.cacheFirst(dataCacheConfig), 'GET');",
			"workbox.routing.registerRoute(/.*memes\\/.\\w+/, workbox.strategies.staleWhileRevalidate(dataCacheConfig), 'GET');",
		],
		"description": "cache all routes"
	},
	"cache images": {
		"prefix": "_sw4",
		"body": [
			"workbox.routing.registerRoute(",
			"    /.*.(?:png|jpg|jpeg|svg)$/,",
			"    workbox.strategies.cacheFirst({",
			"        cacheName: 'meme-images'",
			"    }), ",
			"    'GET');",
		],
		"description": "cache images"
	},
	"skip waiting": {
		"prefix": "_sw5",
		"body": [
			"self.addEventListener('install', function(event) {",
			"  self.skipWaiting();",
			"});",
		],
		"description": "skip waiting"
	},
	"background sync queue": {
		"prefix": "_sw6",
		"body": [
			"const queue = new workbox.backgroundSync.Queue('memes-to-be-saved');"
		],
		"description": "background sync queue"
	},
	"fetch events": {
		"prefix": "_sw7",
		"body": [
			"self.addEventListener('fetch', (event) => {",
			"  if (event.request.url.match(/.*memes/) && event.request.method === 'POST') {",
			"",
			"  }",
			"});",
		],
		"description": "fetch events"
	},
	"naive submit request": {
		"prefix": "_sw8",
		"body": [
			"let response = fetch(event.request.clone())",
			"                .catch((err) => {",
			"                    return queue.addRequest(event.request.clone())",
			"                });",
			"                ",
			"event.respondWith(response);",
		],
		"description": "naive submit request"
	},
	"offline - submit ": {
		"prefix": "_sw9",
		"body": [
			"  /*",
			"      1. Submit request",
			"      2. Invalidate cache (if successful)",
			"      3. Queue the change (if failed)",
			"  */",
			"  ",
			"  let response = fetch(event.request.clone())",
			"      .then(actualResponse => invalidateCache(event.request.clone(), actualResponse))",
			"      .catch(_ => queueChange(event.request.clone()));",
		],
		"description": "offline - submit"
	},
	"offline - invalidate cache": {
		"prefix": "_sw10",
		"body": [
			"function invalidateCache(request, actualResponse) {",
			"    /*",
			"        1. Read the request data.",
			"        2. Open the cache.",
			"        3. Delete anything that matches the url.",
			"        4. Return the actual response.",
			"     */",
			"",
			"    return request.json()",
			"        .then(requestData => {",
			"            const url = `${request.url}/${requestData.category}`;",
			"            ",
			"            return caches.open('meme-data')",
			"                .then(cache => cache.delete(url));",
			"        })",
			"        .then(_ => actualResponse);",
			"}",
		],
		"description": "offline - invalidate cache"
	},
	"offline - queue change ": {
		"prefix": "_sw11",
		"body": [
			"function queueChange(request) {",
			"    /*",
			"        1. Queue the change.",
			"        2. Read the request data.",
			"        3. Open the cache.",
			"        4. Find the matching response.",
			"        5. Read the cached response.",
			"        6. Create a new response.",
			"        7. Update the cached response.",
			"        8. Return a fake response.",
			"     */",
			"",
			"    return queue.addRequest(request.clone())",
			"        .then(_ => request.json())",
			"        .then(requestData => {",
			"            requestData['offline'] = true;",
			"            const url = `${request.url}/${requestData.category}`;",
			"",
			"            return caches.open('meme-data')",
			"                .then(cache => {",
			"                    return cache.match(url)",
			"                        .then(cachedResponse => cachedResponse.json())",
			"                        .then(data => {",
			"                            const updatedRequest = [requestData, ...data];",
			"",
			"                            const fakeResponse = new Response(",
			"                                JSON.stringify(updatedRequest),",
			"                                { status: 200 });",
			"",
			"                            return cache.put(url, fakeResponse.clone())",
			"                                .then(_ => fakeResponse.clone());",
			"                        });",
			"                });",
			"        });",
			"}",
		],
		"description": "offline - invalidate cache - read"
	}
}